name: Check for breaking changes in API

on:
  pull_request:
    branches:
      - main


jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Ensure spec is up-to-date
        run: |
          make gen-swagger
      - name: Check for breaking changes in API
        id: breaking_changes
        uses: oasdiff/oasdiff-action/breaking@1c611ffb1253a72924624aa4fb662e302b3565d3
        with:
          base: https://raw.githubusercontent.com/tjololo/hello-go-openapi/refs/heads/main/docs/swagger.yaml
          revision: docs/swagger.yaml
          fail-on: WARN
          output-to-file: oasdiff.txt

      - name: Generate Action Summary
        id: action_summary
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            // 1. Read the output file
            const fs = require('fs');
            var diffOutput = fs.readFileSync('oasdiff.txt', {encoding: 'utf8', flag: 'r'});
            // 2. Prep the output
            const output = `# Breaking API Changes Summary (breaking only)
            #### Check for breaking API changes: ðŸ¤–\`${{ steps.breaking_changes.outcome }}\`
            <details><summary>Breaking Changes Output</summary>
            
            \`\`\`\n
            ${diffOutput}
            \`\`\`
            
            </details>`;
            
            // 3. Set the output variable
            fs.writeFileSync('summary.md', output);
            core.setOutput('summary', output);
      - name: Write Action Summary
        if: failure()
        shell: bash
        run: cat summary.md >> $GITHUB_STEP_SUMMARY
      - name: Write to PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if(context.issue.number) {
              const fs = require('fs');
              const output = fs.readFileSync('summary.md', {encoding: 'utf8', flag: 'r'});
              const { data: comments } = await github.rest.issues.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo
              });
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('# API Changes Summary (breaking only)')
              })
              if (botComment) {
                github.rest.issues.updateComment({
                  comment_id: botComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                });
              }
            }